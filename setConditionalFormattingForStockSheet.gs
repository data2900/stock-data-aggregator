function setConditionalFormattingForStockSheet() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("StockData_Áµ±Âêà");
  if (!sheet) throw new Error("‚ùå „Ç∑„Éº„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");

  const red = "#f4cccc"; // Â¢óÂä†ÔºàËµ§Ôºâ
  const blue = "#cfe2f3"; // Ê∏õÂ∞ëÔºàÈùíÔºâ
  const maxRows = sheet.getLastRow();
  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

  const targetPrefixes = [
    "Ê†™‰æ°", "‰∫àÊÉ≥PER", "‰∫àÊÉ≥ÈÖçÂΩìÂà©Âõû„Çä", "PBRÔºàÂÆüÁ∏æÔºâ", "ROEÔºà‰∫àÊÉ≥Ôºâ", "Ê†™ÂºèÁõäÂõû„ÇäÔºà‰∫àÊÉ≥Ôºâ",
    "Â¢óÂèéÁéá", "ÁµåÂ∏∏Â¢óÁõäÁéá", "Â£≤‰∏äÈ´òÁµåÂ∏∏Âà©ÁõäÁéá", "ROE", "ROA", "Ê†™‰∏ªË≥áÊú¨ÊØîÁéá", "ÈÖçÂΩìÊÄßÂêë",
    "„É¨„Éº„ÉÜ„Ç£„É≥„Ç∞", "Â£≤‰∏äÈ´ò‰∫àÊÉ≥", "ÁµåÂ∏∏Âà©Áõä‰∫àÊÉ≥", "Ë¶èÊ®°", "Ââ≤ÂÆâÂ∫¶", "ÊàêÈï∑", "ÂèéÁõäÊÄß",
    "ÂÆâÂÖ®ÊÄß", "„É™„Çπ„ÇØ", "„É™„Çø„Éº„É≥", "ÊµÅÂãïÊÄß", "„Éà„É¨„É≥„Éâ", "ÁÇ∫Êõø", "„ÉÜ„ÇØ„Éã„Ç´„É´"
  ];

  const percentPrefixes = [
    "‰∫àÊÉ≥ÈÖçÂΩìÂà©Âõû„Çä", "ROEÔºà‰∫àÊÉ≥Ôºâ", "Ê†™ÂºèÁõäÂõû„ÇäÔºà‰∫àÊÉ≥Ôºâ",
    "Â¢óÂèéÁéá", "ÁµåÂ∏∏Â¢óÁõäÁéá", "Â£≤‰∏äÈ´òÁµåÂ∏∏Âà©ÁõäÁéá",
    "ROE", "ROA", "Ê†™‰∏ªË≥áÊú¨ÊØîÁéá", "ÈÖçÂΩìÊÄßÂêë"
  ];

  // „Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ„Åî„Å®„Å´Âàó„Çí„Éû„ÉÉ„Éî„É≥„Ç∞
  const prefixMap = {};
  headers.forEach((header, colIndex) => {
    for (const prefix of targetPrefixes) {
      if (header.startsWith(prefix + "_")) {
        if (!prefixMap[prefix]) prefixMap[prefix] = [];
        prefixMap[prefix].push({ header, col: colIndex + 1 }); // 1-indexed
      }
    }
  });

  // ÂêÑ„Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ„ÅÆÂàó„ÇíÊó•‰ªòÈôçÈ†Ü„Åß‰∏¶„Å≥Êõø„Åà
  for (const prefix in prefixMap) {
    prefixMap[prefix].sort((a, b) => {
      const dateA = a.header.split("_")[1];
      const dateB = b.header.split("_")[1];
      return dateB.localeCompare(dateA); // ÈôçÈ†Ü
    });
  }

  // %‚ÜíÂ∞èÊï∞Â§âÊèõÔºö‰∏ÄÊã¨„Éá„Éº„ÇøÂèñÂæó‚ÜíÂ§âÊèõ‚ÜíÊõ∏„ÅçÊàª„Åó
  const allPercentCols = percentPrefixes
    .flatMap(prefix => prefixMap[prefix] || [])
    .map(c => c.col);

  if (allPercentCols.length > 0) {
    const minCol = Math.min(...allPercentCols);
    const maxCol = Math.max(...allPercentCols);
    const range = sheet.getRange(2, minCol, maxRows - 1, maxCol - minCol + 1);
    const values = range.getValues();

    const colMap = {};
    allPercentCols.forEach(col => colMap[col - minCol] = true);

    for (let row = 0; row < values.length; row++) {
      for (let colOffset in colMap) {
        const cell = values[row][colOffset];
        if (typeof cell === "string" && cell.trim().endsWith("%")) {
          const num = parseFloat(cell.replace("%", ""));
          values[row][colOffset] = isNaN(num) ? cell : num / 100;
        }
      }
    }
    range.setValues(values);
  }

  // Êù°‰ª∂‰ªò„ÅçÊõ∏Âºè‰ΩúÊàêÔºàÂÖ®„É´„Éº„É´Ôºâ
  const rules = [];
  for (const prefix in prefixMap) {
    const cols = prefixMap[prefix];
    for (let i = 0; i < cols.length - 1; i++) {
      const newerCol = cols[i].col;
      const olderCol = cols[i + 1].col;
      const newerA1 = columnToLetter(newerCol);
      const olderA1 = columnToLetter(olderCol);
      const range = sheet.getRange(`${newerA1}2:${newerA1}${maxRows}`);

      // Â¢óÂä† ‚Üí Ëµ§
      rules.push(
        SpreadsheetApp.newConditionalFormatRule()
          .whenFormulaSatisfied(`=AND(ISNUMBER(${newerA1}2), ISNUMBER(${olderA1}2), ${newerA1}2 > ${olderA1}2)`)
          .setBackground(red)
          .setRanges([range])
          .build()
      );

      // Ê∏õÂ∞ë ‚Üí Èùí
      rules.push(
        SpreadsheetApp.newConditionalFormatRule()
          .whenFormulaSatisfied(`=AND(ISNUMBER(${newerA1}2), ISNUMBER(${olderA1}2), ${newerA1}2 < ${olderA1}2)`)
          .setBackground(blue)
          .setRanges([range])
          .build()
      );
    }
  }

  // Êï∞ÂÄ§„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅÆ‰∏ÄÊã¨Ë®≠ÂÆö
  const allCols = Object.values(prefixMap).flat().map(c => c.col);
  const uniqueCols = [...new Set(allCols)];
  const minDataCol = Math.min(...uniqueCols);
  const maxDataCol = Math.max(...uniqueCols);
  const formatRange = sheet.getRange(2, minDataCol, maxRows - 1, maxDataCol - minDataCol + 1);
  formatRange.setNumberFormat("0.##");

  // Êõ∏Âºè„É´„Éº„É´Ë®≠ÂÆö
  sheet.clearConditionalFormatRules();
  sheet.setConditionalFormatRules(rules);

  Logger.log(`‚úÖ Êù°‰ª∂‰ªò„ÅçÊõ∏Âºè ${rules.length} ‰ª∂Ë®≠ÂÆö & %‚ÜíÂ∞èÊï∞Â§âÊèõ & Êï∞ÂÄ§„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂÆå‰∫Ü`);
}

// üî§ ÂàóÁï™Âè∑ ‚Üí A„ÄúZZÂΩ¢Âºè
function columnToLetter(column) {
  let temp = '';
  while (column > 0) {
    let modulo = (column - 1) % 26;
    temp = String.fromCharCode(65 + modulo) + temp;
    column = Math.floor((column - modulo) / 26);
  }
  return temp;
}
